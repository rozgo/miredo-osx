Index: src/privproc.c
===================================================================
--- src/privproc.c	(revision 1938)
+++ src/privproc.c	(working copy)
@@ -23,10 +23,12 @@
 # include <config.h>
 #endif
 
+#include <gettext.h>
 #include <string.h>
 #include <stdlib.h> /* exit() */
 #include <errno.h>
 #include <inttypes.h>
+#include <syslog.h>
 
 #include <sys/types.h>
 #include <unistd.h>
@@ -52,7 +54,10 @@
 	uint16_t mtu;
 };
 
+const char* command_if_up;
+const char* command_if_down;
 
+
 int
 miredo_privileged_process (struct tun6 *tunnel)
 {
@@ -123,6 +128,14 @@
 			{
 				tun6_delRoute (tunnel, &in6addr_any, 0, +5);
 				tun6_delAddress (tunnel, &oldcfg.addr, 32);
+				if(command_if_down)
+				{
+					int ret;
+					syslog (LOG_DEBUG, _("Executing \"%s\"."), command_if_down);
+					if((ret=system(command_if_down))) {
+						syslog (LOG_NOTICE, _("\"%s\" returned error code %d."), command_if_down, ret);
+					}
+				}
 			}
 
 			/* Adds new addresses */
@@ -146,6 +159,16 @@
 				if (tun6_addAddress (tunnel, &newcfg.addr, 32)
 				 || tun6_addRoute (tunnel, &in6addr_any, 0, +5))
 					res = -1;
+					if(command_if_up)
+				
+				if(command_if_up)
+				{
+					int ret;
+					syslog (LOG_DEBUG, _("Executing \"%s\"."), command_if_up);
+					if((ret=system(command_if_up))) {
+						syslog (LOG_NOTICE, _("\"%s\" returned error code %d."), command_if_up, ret);
+					}
+				}
 			}
 
 			/* Saves address */
Index: src/relayd.c
===================================================================
--- src/relayd.c	(revision 1938)
+++ src/relayd.c	(working copy)
@@ -67,6 +67,8 @@
 #include "miredo.h"
 #include "conf.h"
 
+extern const char* command_if_up;
+extern const char* command_if_down;
 
 static int relay_diagnose (void)
 {
@@ -240,8 +242,9 @@
 		        str, (unsigned)mtu);
 
 	assert (data != NULL);
-
+	
 	miredo_configure_tunnel (((miredo_tunnel *)data)->priv_fd, addr, mtu);
+	
 }
 
 
@@ -419,6 +422,9 @@
 		syslog (LOG_ALERT, _("Fatal configuration error"));
 		return -2;
 	}
+	
+	command_if_up = miredo_conf_get (conf, "CommandUp", NULL);
+	command_if_down = miredo_conf_get (conf, "CommandDown", NULL);
 
 #ifdef MIREDO_TEREDO_CLIENT
 	const char *server_name2 = NULL;
Index: src/conf.c
===================================================================
--- src/conf.c	(revision 1938)
+++ src/conf.c	(working copy)
@@ -238,6 +238,7 @@
 	while (fgets (lbuf, sizeof (lbuf), stream) != NULL)
 	{
 		size_t len = strlen (lbuf) - 1;
+		size_t start_of_value;
 		line++;
 
 		if (lbuf[len] != '\n')
@@ -252,10 +253,20 @@
 
 		lbuf[len] = '\0';
 		char nbuf[32], vbuf[1024];
-
-		switch (sscanf (lbuf, " %31s %1023s", nbuf, vbuf))
+		
+		// Remove comments
+		for(char* c=lbuf;*c;++c)
+			if(*c=='#') {
+				*c = 0;
+				break;
+			}
+		
+		switch (sscanf (lbuf, " %31s %n%1023s", nbuf,&start_of_value, vbuf))
 		{
 			case 2:
+			case 3:
+				strncpy(vbuf,lbuf+start_of_value,sizeof(vbuf));
+				
 				if ((*nbuf != '#') // comment
 				 && !miredo_conf_set (conf, nbuf, vbuf, line))
 					return false;
Index: libteredo/maintain.c
===================================================================
--- libteredo/maintain.c	(revision 1938)
+++ libteredo/maintain.c	(working copy)
@@ -421,6 +421,9 @@
 		{
 			count = 0;
 
+			if (state == PROBE_SYMMETRIC)
+				c_state->addr.teredo.client_port = newaddr.teredo.client_port;
+
 			if ((c_state->addr.teredo.client_port != newaddr.teredo.client_port)
 			 || (c_state->addr.teredo.client_ip != newaddr.teredo.client_ip))
 			{
